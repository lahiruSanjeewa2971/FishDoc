# -*- coding: utf-8 -*-
"""Copy of fish_disease_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZqpWKjCJJu4LyO0T5RlsVHlvNZsHv1L
"""


#Import tensorflow libraries
import tensorflow as tf
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt
from IPython.display import HTML
#import image data generator
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg16 import VGG16

#Mount the google drive to google colab
from google.colab import drive
drive.mount('/content/drive')

#Define image size and channels
IMAGE_SIZE = 224
CHANNELS = 3
#data augmenation and data preprocessing for Train dataset using imagedatagenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=True,
    rotation_range=10
)
#Get data from before and assign target size of the image and define batch size
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/splitteddataset/train',
    target_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=32,
    class_mode='sparse'
)
#View the class indices
train_generator.class_indices
#View the class names
class_names = list(train_generator.class_indices.keys())
class_names

#View the batch shape
for image_batch, label_batch in train_generator:
  print(image_batch.shape)
  break

#Get data using image datagenerator for validation dataset
IMAGE_SIZE = 224
CHANNELS = 3

val_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=True,
    rotation_range=10
)
#Get data from before and assign target size of the image and define batch size
validation_generator = val_datagen.flow_from_directory(
    '/content/drive/MyDrive/splitteddataset/val',
    target_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=32,
    class_mode='sparse'
)

IMAGE_SIZE = 224
CHANNELS = 3
#Get data using image datagenerator for test dataset
test_datagen = ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=True,
    rotation_range=10
)
#Get data from before and assign target size of the image and define batch size
test_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/splitteddataset/test',
    target_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=32,
    class_mode='sparse'
)
#define input shape and number of classes
input_shape=( IMAGE_SIZE, IMAGE_SIZE, CHANNELS)
n_classes = 7

#Use VGG16 in tensorflow and define input shape
base_model = VGG16(weights="imagenet", include_top=False, input_shape=input_shape)
base_model.trainable = False
#Define model and add VGG16 and then add flatter layer and Dense layers
model = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(n_classes, activation='softmax')  
])
#Get model summary
model.summary()
#Model compile
model.compile(
  optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
    metrics=['accuracy']
)

#Model fit operation

history = model.fit(
    train_generator,
    steps_per_epoch=9,
    batch_size=32,
    validation_data=validation_generator,
    validation_steps=2,
    verbose=1,
    epochs=20
)
#Evaluate the model and display the scores
scores = model.evaluate(test_generator)
#Display the model
scores
#Display the history
history
#Get the parameters like loss and validation accuracy
history.params

history.history.keys()
#assign varriables to accauracy and validation accuracy getting by model
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
#assign varriables to loss and validation loss accuracy getting by model
loss = history.history['loss']
val_loss = history.history['val_loss']

#Plot figures in range of epochs
plt.figure(figsize=(8,8))
plt.subplot(1, 2, 1)
plt.plot(range(20), acc, label='Training Accuracy')
plt.plot(range(20), val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')


plt.subplot(1, 2, 2)
plt.plot(range(20), loss, label='Training loss')
plt.plot(range(20), val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')

#First get the sample output
import numpy as np


for image_batch, label_batch in test_generator:
    first_image = image_batch[0]
    first_label = int(label_batch[0])
    
    print("first image to predict")
    plt.imshow(first_image)
    print("actual label:",class_names[first_label])
    
    batch_prediction = model.predict(image_batch)
    print("predicted label:",class_names[np.argmax(batch_prediction[0])])
    
    break
#Second get the sample 15 outputs
def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i])
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

plt.figure(figsize=(15, 15))
for images, labels in test_generator:
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i])
        
        predicted_class, confidence = predict(model, images[i])
        actual_class = class_names[int(labels[i])] 
        
        plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class}.\n Confidence: {confidence}%")
        
        plt.axis("off")
    break

model_version=16
model.save(f"/content/drive/MyDrive/newdataset/newModel/{model_version}.h5")

